// Code generated by protoc-gen-go.
// source: cork.proto
// DO NOT EDIT!

/*
Package cork is a generated protocol buffer package.

It is generated from these files:
	cork.proto

It has these top-level messages:
	Empty
	Response
	KillRequest
	InitializeRequest
	StatusRequest
	ExecuteInputEvent
	ParamsResponseEvent
	StageExecuteRequestEvent
	SignalEvent
	InputEvent
	ExecuteOutputEvent
	ParamDefinition
	ParamsRequestEvent
	EndEvent
	ErrorEvent
	ExportEvent
	OutputEvent
	StepExecuteRequest
	Step
	StepListResponse
	VolumesToMountGetResponse
	StageExecuteRequest
	EventReactRequest
*/
package cork

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	Status uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// Types that are valid to be assigned to Res:
	//	*Response_Empty
	//	*Response_Steps
	//	*Response_Volumes
	Res isResponse_Res `protobuf_oneof:"res"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isResponse_Res interface {
	isResponse_Res()
}

type Response_Empty struct {
	Empty *Empty `protobuf:"bytes,2,opt,name=empty,oneof"`
}
type Response_Steps struct {
	Steps *StepListResponse `protobuf:"bytes,3,opt,name=steps,oneof"`
}
type Response_Volumes struct {
	Volumes *VolumesToMountGetResponse `protobuf:"bytes,4,opt,name=volumes,oneof"`
}

func (*Response_Empty) isResponse_Res()   {}
func (*Response_Steps) isResponse_Res()   {}
func (*Response_Volumes) isResponse_Res() {}

func (m *Response) GetRes() isResponse_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *Response) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Response) GetEmpty() *Empty {
	if x, ok := m.GetRes().(*Response_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Response) GetSteps() *StepListResponse {
	if x, ok := m.GetRes().(*Response_Steps); ok {
		return x.Steps
	}
	return nil
}

func (m *Response) GetVolumes() *VolumesToMountGetResponse {
	if x, ok := m.GetRes().(*Response_Volumes); ok {
		return x.Volumes
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Empty)(nil),
		(*Response_Steps)(nil),
		(*Response_Volumes)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// res
	switch x := m.Res.(type) {
	case *Response_Empty:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Response_Steps:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Steps); err != nil {
			return err
		}
	case *Response_Volumes:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Volumes); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Res has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 2: // res.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Res = &Response_Empty{msg}
		return true, err
	case 3: // res.steps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StepListResponse)
		err := b.DecodeMessage(msg)
		m.Res = &Response_Steps{msg}
		return true, err
	case 4: // res.volumes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VolumesToMountGetResponse)
		err := b.DecodeMessage(msg)
		m.Res = &Response_Volumes{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// res
	switch x := m.Res.(type) {
	case *Response_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Steps:
		s := proto.Size(x.Steps)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Volumes:
		s := proto.Size(x.Volumes)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KillRequest struct {
}

func (m *KillRequest) Reset()                    { *m = KillRequest{} }
func (m *KillRequest) String() string            { return proto.CompactTextString(m) }
func (*KillRequest) ProtoMessage()               {}
func (*KillRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InitializeRequest struct {
}

func (m *InitializeRequest) Reset()                    { *m = InitializeRequest{} }
func (m *InitializeRequest) String() string            { return proto.CompactTextString(m) }
func (*InitializeRequest) ProtoMessage()               {}
func (*InitializeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ExecuteInputEvent struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*ExecuteInputEvent_Empty
	//	*ExecuteInputEvent_StageExecuteRequest
	//	*ExecuteInputEvent_Signal
	//	*ExecuteInputEvent_Input
	//	*ExecuteInputEvent_ParamsResponse
	Body isExecuteInputEvent_Body `protobuf_oneof:"body"`
}

func (m *ExecuteInputEvent) Reset()                    { *m = ExecuteInputEvent{} }
func (m *ExecuteInputEvent) String() string            { return proto.CompactTextString(m) }
func (*ExecuteInputEvent) ProtoMessage()               {}
func (*ExecuteInputEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isExecuteInputEvent_Body interface {
	isExecuteInputEvent_Body()
}

type ExecuteInputEvent_Empty struct {
	Empty *Empty `protobuf:"bytes,2,opt,name=empty,oneof"`
}
type ExecuteInputEvent_StageExecuteRequest struct {
	StageExecuteRequest *StageExecuteRequestEvent `protobuf:"bytes,3,opt,name=stageExecuteRequest,oneof"`
}
type ExecuteInputEvent_Signal struct {
	Signal *SignalEvent `protobuf:"bytes,4,opt,name=signal,oneof"`
}
type ExecuteInputEvent_Input struct {
	Input *InputEvent `protobuf:"bytes,5,opt,name=input,oneof"`
}
type ExecuteInputEvent_ParamsResponse struct {
	ParamsResponse *ParamsResponseEvent `protobuf:"bytes,6,opt,name=paramsResponse,oneof"`
}

func (*ExecuteInputEvent_Empty) isExecuteInputEvent_Body()               {}
func (*ExecuteInputEvent_StageExecuteRequest) isExecuteInputEvent_Body() {}
func (*ExecuteInputEvent_Signal) isExecuteInputEvent_Body()              {}
func (*ExecuteInputEvent_Input) isExecuteInputEvent_Body()               {}
func (*ExecuteInputEvent_ParamsResponse) isExecuteInputEvent_Body()      {}

func (m *ExecuteInputEvent) GetBody() isExecuteInputEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ExecuteInputEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExecuteInputEvent) GetEmpty() *Empty {
	if x, ok := m.GetBody().(*ExecuteInputEvent_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *ExecuteInputEvent) GetStageExecuteRequest() *StageExecuteRequestEvent {
	if x, ok := m.GetBody().(*ExecuteInputEvent_StageExecuteRequest); ok {
		return x.StageExecuteRequest
	}
	return nil
}

func (m *ExecuteInputEvent) GetSignal() *SignalEvent {
	if x, ok := m.GetBody().(*ExecuteInputEvent_Signal); ok {
		return x.Signal
	}
	return nil
}

func (m *ExecuteInputEvent) GetInput() *InputEvent {
	if x, ok := m.GetBody().(*ExecuteInputEvent_Input); ok {
		return x.Input
	}
	return nil
}

func (m *ExecuteInputEvent) GetParamsResponse() *ParamsResponseEvent {
	if x, ok := m.GetBody().(*ExecuteInputEvent_ParamsResponse); ok {
		return x.ParamsResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecuteInputEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecuteInputEvent_OneofMarshaler, _ExecuteInputEvent_OneofUnmarshaler, _ExecuteInputEvent_OneofSizer, []interface{}{
		(*ExecuteInputEvent_Empty)(nil),
		(*ExecuteInputEvent_StageExecuteRequest)(nil),
		(*ExecuteInputEvent_Signal)(nil),
		(*ExecuteInputEvent_Input)(nil),
		(*ExecuteInputEvent_ParamsResponse)(nil),
	}
}

func _ExecuteInputEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecuteInputEvent)
	// body
	switch x := m.Body.(type) {
	case *ExecuteInputEvent_Empty:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *ExecuteInputEvent_StageExecuteRequest:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StageExecuteRequest); err != nil {
			return err
		}
	case *ExecuteInputEvent_Signal:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signal); err != nil {
			return err
		}
	case *ExecuteInputEvent_Input:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Input); err != nil {
			return err
		}
	case *ExecuteInputEvent_ParamsResponse:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParamsResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecuteInputEvent.Body has unexpected type %T", x)
	}
	return nil
}

func _ExecuteInputEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecuteInputEvent)
	switch tag {
	case 2: // body.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteInputEvent_Empty{msg}
		return true, err
	case 3: // body.stageExecuteRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StageExecuteRequestEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteInputEvent_StageExecuteRequest{msg}
		return true, err
	case 4: // body.signal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignalEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteInputEvent_Signal{msg}
		return true, err
	case 5: // body.input
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InputEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteInputEvent_Input{msg}
		return true, err
	case 6: // body.paramsResponse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParamsResponseEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteInputEvent_ParamsResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecuteInputEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecuteInputEvent)
	// body
	switch x := m.Body.(type) {
	case *ExecuteInputEvent_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteInputEvent_StageExecuteRequest:
		s := proto.Size(x.StageExecuteRequest)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteInputEvent_Signal:
		s := proto.Size(x.Signal)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteInputEvent_Input:
		s := proto.Size(x.Input)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteInputEvent_ParamsResponse:
		s := proto.Size(x.ParamsResponse)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ParamsResponseEvent struct {
	Params map[string]string `protobuf:"bytes,1,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ParamsResponseEvent) Reset()                    { *m = ParamsResponseEvent{} }
func (m *ParamsResponseEvent) String() string            { return proto.CompactTextString(m) }
func (*ParamsResponseEvent) ProtoMessage()               {}
func (*ParamsResponseEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ParamsResponseEvent) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type StageExecuteRequestEvent struct {
	Stage string `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
}

func (m *StageExecuteRequestEvent) Reset()                    { *m = StageExecuteRequestEvent{} }
func (m *StageExecuteRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*StageExecuteRequestEvent) ProtoMessage()               {}
func (*StageExecuteRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StageExecuteRequestEvent) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

type SignalEvent struct {
	Signal int32 `protobuf:"varint,1,opt,name=signal" json:"signal,omitempty"`
}

func (m *SignalEvent) Reset()                    { *m = SignalEvent{} }
func (m *SignalEvent) String() string            { return proto.CompactTextString(m) }
func (*SignalEvent) ProtoMessage()               {}
func (*SignalEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SignalEvent) GetSignal() int32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type InputEvent struct {
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *InputEvent) Reset()                    { *m = InputEvent{} }
func (m *InputEvent) String() string            { return proto.CompactTextString(m) }
func (*InputEvent) ProtoMessage()               {}
func (*InputEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InputEvent) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

type ExecuteOutputEvent struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*ExecuteOutputEvent_Empty
	//	*ExecuteOutputEvent_End
	//	*ExecuteOutputEvent_Output
	//	*ExecuteOutputEvent_Export
	//	*ExecuteOutputEvent_Error
	//	*ExecuteOutputEvent_ParamsRequest
	Body isExecuteOutputEvent_Body `protobuf_oneof:"body"`
}

func (m *ExecuteOutputEvent) Reset()                    { *m = ExecuteOutputEvent{} }
func (m *ExecuteOutputEvent) String() string            { return proto.CompactTextString(m) }
func (*ExecuteOutputEvent) ProtoMessage()               {}
func (*ExecuteOutputEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isExecuteOutputEvent_Body interface {
	isExecuteOutputEvent_Body()
}

type ExecuteOutputEvent_Empty struct {
	Empty *Empty `protobuf:"bytes,2,opt,name=empty,oneof"`
}
type ExecuteOutputEvent_End struct {
	End *EndEvent `protobuf:"bytes,3,opt,name=end,oneof"`
}
type ExecuteOutputEvent_Output struct {
	Output *OutputEvent `protobuf:"bytes,4,opt,name=output,oneof"`
}
type ExecuteOutputEvent_Export struct {
	Export *ExportEvent `protobuf:"bytes,5,opt,name=export,oneof"`
}
type ExecuteOutputEvent_Error struct {
	Error *ErrorEvent `protobuf:"bytes,6,opt,name=error,oneof"`
}
type ExecuteOutputEvent_ParamsRequest struct {
	ParamsRequest *ParamsRequestEvent `protobuf:"bytes,7,opt,name=paramsRequest,oneof"`
}

func (*ExecuteOutputEvent_Empty) isExecuteOutputEvent_Body()         {}
func (*ExecuteOutputEvent_End) isExecuteOutputEvent_Body()           {}
func (*ExecuteOutputEvent_Output) isExecuteOutputEvent_Body()        {}
func (*ExecuteOutputEvent_Export) isExecuteOutputEvent_Body()        {}
func (*ExecuteOutputEvent_Error) isExecuteOutputEvent_Body()         {}
func (*ExecuteOutputEvent_ParamsRequest) isExecuteOutputEvent_Body() {}

func (m *ExecuteOutputEvent) GetBody() isExecuteOutputEvent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ExecuteOutputEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ExecuteOutputEvent) GetEmpty() *Empty {
	if x, ok := m.GetBody().(*ExecuteOutputEvent_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *ExecuteOutputEvent) GetEnd() *EndEvent {
	if x, ok := m.GetBody().(*ExecuteOutputEvent_End); ok {
		return x.End
	}
	return nil
}

func (m *ExecuteOutputEvent) GetOutput() *OutputEvent {
	if x, ok := m.GetBody().(*ExecuteOutputEvent_Output); ok {
		return x.Output
	}
	return nil
}

func (m *ExecuteOutputEvent) GetExport() *ExportEvent {
	if x, ok := m.GetBody().(*ExecuteOutputEvent_Export); ok {
		return x.Export
	}
	return nil
}

func (m *ExecuteOutputEvent) GetError() *ErrorEvent {
	if x, ok := m.GetBody().(*ExecuteOutputEvent_Error); ok {
		return x.Error
	}
	return nil
}

func (m *ExecuteOutputEvent) GetParamsRequest() *ParamsRequestEvent {
	if x, ok := m.GetBody().(*ExecuteOutputEvent_ParamsRequest); ok {
		return x.ParamsRequest
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecuteOutputEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecuteOutputEvent_OneofMarshaler, _ExecuteOutputEvent_OneofUnmarshaler, _ExecuteOutputEvent_OneofSizer, []interface{}{
		(*ExecuteOutputEvent_Empty)(nil),
		(*ExecuteOutputEvent_End)(nil),
		(*ExecuteOutputEvent_Output)(nil),
		(*ExecuteOutputEvent_Export)(nil),
		(*ExecuteOutputEvent_Error)(nil),
		(*ExecuteOutputEvent_ParamsRequest)(nil),
	}
}

func _ExecuteOutputEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecuteOutputEvent)
	// body
	switch x := m.Body.(type) {
	case *ExecuteOutputEvent_Empty:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *ExecuteOutputEvent_End:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.End); err != nil {
			return err
		}
	case *ExecuteOutputEvent_Output:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Output); err != nil {
			return err
		}
	case *ExecuteOutputEvent_Export:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Export); err != nil {
			return err
		}
	case *ExecuteOutputEvent_Error:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *ExecuteOutputEvent_ParamsRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ParamsRequest); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecuteOutputEvent.Body has unexpected type %T", x)
	}
	return nil
}

func _ExecuteOutputEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecuteOutputEvent)
	switch tag {
	case 2: // body.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Empty)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteOutputEvent_Empty{msg}
		return true, err
	case 3: // body.end
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EndEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteOutputEvent_End{msg}
		return true, err
	case 4: // body.output
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OutputEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteOutputEvent_Output{msg}
		return true, err
	case 5: // body.export
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExportEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteOutputEvent_Export{msg}
		return true, err
	case 6: // body.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteOutputEvent_Error{msg}
		return true, err
	case 7: // body.paramsRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ParamsRequestEvent)
		err := b.DecodeMessage(msg)
		m.Body = &ExecuteOutputEvent_ParamsRequest{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecuteOutputEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecuteOutputEvent)
	// body
	switch x := m.Body.(type) {
	case *ExecuteOutputEvent_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteOutputEvent_End:
		s := proto.Size(x.End)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteOutputEvent_Output:
		s := proto.Size(x.Output)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteOutputEvent_Export:
		s := proto.Size(x.Export)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteOutputEvent_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecuteOutputEvent_ParamsRequest:
		s := proto.Size(x.ParamsRequest)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ParamDefinition struct {
	Type        string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Default     string `protobuf:"bytes,2,opt,name=default" json:"default,omitempty"`
	HasDefault  bool   `protobuf:"varint,3,opt,name=hasDefault" json:"hasDefault,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	IsSensitive bool   `protobuf:"varint,5,opt,name=isSensitive" json:"isSensitive,omitempty"`
}

func (m *ParamDefinition) Reset()                    { *m = ParamDefinition{} }
func (m *ParamDefinition) String() string            { return proto.CompactTextString(m) }
func (*ParamDefinition) ProtoMessage()               {}
func (*ParamDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ParamDefinition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ParamDefinition) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

func (m *ParamDefinition) GetHasDefault() bool {
	if m != nil {
		return m.HasDefault
	}
	return false
}

func (m *ParamDefinition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ParamDefinition) GetIsSensitive() bool {
	if m != nil {
		return m.IsSensitive
	}
	return false
}

type ParamsRequestEvent struct {
	ParamDefinitions map[string]*ParamDefinition `protobuf:"bytes,1,rep,name=paramDefinitions" json:"paramDefinitions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ParamsRequestEvent) Reset()                    { *m = ParamsRequestEvent{} }
func (m *ParamsRequestEvent) String() string            { return proto.CompactTextString(m) }
func (*ParamsRequestEvent) ProtoMessage()               {}
func (*ParamsRequestEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ParamsRequestEvent) GetParamDefinitions() map[string]*ParamDefinition {
	if m != nil {
		return m.ParamDefinitions
	}
	return nil
}

type EndEvent struct {
	Tags []string `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
}

func (m *EndEvent) Reset()                    { *m = EndEvent{} }
func (m *EndEvent) String() string            { return proto.CompactTextString(m) }
func (*EndEvent) ProtoMessage()               {}
func (*EndEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EndEvent) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ErrorEvent struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorEvent) Reset()                    { *m = ErrorEvent{} }
func (m *ErrorEvent) String() string            { return proto.CompactTextString(m) }
func (*ErrorEvent) ProtoMessage()               {}
func (*ErrorEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ErrorEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ExportEvent struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ExportEvent) Reset()                    { *m = ExportEvent{} }
func (m *ExportEvent) String() string            { return proto.CompactTextString(m) }
func (*ExportEvent) ProtoMessage()               {}
func (*ExportEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ExportEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ExportEvent) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type OutputEvent struct {
	Bytes  []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Stream string `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
}

func (m *OutputEvent) Reset()                    { *m = OutputEvent{} }
func (m *OutputEvent) String() string            { return proto.CompactTextString(m) }
func (*OutputEvent) ProtoMessage()               {}
func (*OutputEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OutputEvent) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *OutputEvent) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

type StepExecuteRequest struct {
	StepName string `protobuf:"bytes,1,opt,name=stepName" json:"stepName,omitempty"`
}

func (m *StepExecuteRequest) Reset()                    { *m = StepExecuteRequest{} }
func (m *StepExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*StepExecuteRequest) ProtoMessage()               {}
func (*StepExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StepExecuteRequest) GetStepName() string {
	if m != nil {
		return m.StepName
	}
	return ""
}

type Step struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Step) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StepListResponse struct {
	Step []*Step `protobuf:"bytes,1,rep,name=step" json:"step,omitempty"`
}

func (m *StepListResponse) Reset()                    { *m = StepListResponse{} }
func (m *StepListResponse) String() string            { return proto.CompactTextString(m) }
func (*StepListResponse) ProtoMessage()               {}
func (*StepListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *StepListResponse) GetStep() []*Step {
	if m != nil {
		return m.Step
	}
	return nil
}

type VolumesToMountGetResponse struct {
	Volumes []string `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *VolumesToMountGetResponse) Reset()                    { *m = VolumesToMountGetResponse{} }
func (m *VolumesToMountGetResponse) String() string            { return proto.CompactTextString(m) }
func (*VolumesToMountGetResponse) ProtoMessage()               {}
func (*VolumesToMountGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *VolumesToMountGetResponse) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type StageExecuteRequest struct {
	Stage string `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
}

func (m *StageExecuteRequest) Reset()                    { *m = StageExecuteRequest{} }
func (m *StageExecuteRequest) String() string            { return proto.CompactTextString(m) }
func (*StageExecuteRequest) ProtoMessage()               {}
func (*StageExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *StageExecuteRequest) GetStage() string {
	if m != nil {
		return m.Stage
	}
	return ""
}

type EventReactRequest struct {
	Project string            `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Tags    []string          `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Outputs map[string]string `protobuf:"bytes,3,rep,name=outputs" json:"outputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EventReactRequest) Reset()                    { *m = EventReactRequest{} }
func (m *EventReactRequest) String() string            { return proto.CompactTextString(m) }
func (*EventReactRequest) ProtoMessage()               {}
func (*EventReactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EventReactRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *EventReactRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EventReactRequest) GetOutputs() map[string]string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*KillRequest)(nil), "KillRequest")
	proto.RegisterType((*InitializeRequest)(nil), "InitializeRequest")
	proto.RegisterType((*StatusRequest)(nil), "StatusRequest")
	proto.RegisterType((*ExecuteInputEvent)(nil), "ExecuteInputEvent")
	proto.RegisterType((*ParamsResponseEvent)(nil), "ParamsResponseEvent")
	proto.RegisterType((*StageExecuteRequestEvent)(nil), "StageExecuteRequestEvent")
	proto.RegisterType((*SignalEvent)(nil), "SignalEvent")
	proto.RegisterType((*InputEvent)(nil), "InputEvent")
	proto.RegisterType((*ExecuteOutputEvent)(nil), "ExecuteOutputEvent")
	proto.RegisterType((*ParamDefinition)(nil), "ParamDefinition")
	proto.RegisterType((*ParamsRequestEvent)(nil), "ParamsRequestEvent")
	proto.RegisterType((*EndEvent)(nil), "EndEvent")
	proto.RegisterType((*ErrorEvent)(nil), "ErrorEvent")
	proto.RegisterType((*ExportEvent)(nil), "ExportEvent")
	proto.RegisterType((*OutputEvent)(nil), "OutputEvent")
	proto.RegisterType((*StepExecuteRequest)(nil), "StepExecuteRequest")
	proto.RegisterType((*Step)(nil), "Step")
	proto.RegisterType((*StepListResponse)(nil), "StepListResponse")
	proto.RegisterType((*VolumesToMountGetResponse)(nil), "VolumesToMountGetResponse")
	proto.RegisterType((*StageExecuteRequest)(nil), "StageExecuteRequest")
	proto.RegisterType((*EventReactRequest)(nil), "EventReactRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CorkTypeService service

type CorkTypeServiceClient interface {
	// Status endpoint
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Response, error)
	// Kills the cork server
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*Response, error)
	// Executes a specific stage
	StageExecute(ctx context.Context, opts ...grpc.CallOption) (CorkTypeService_StageExecuteClient, error)
	// React to an event
	EventReact(ctx context.Context, in *EventReactRequest, opts ...grpc.CallOption) (*Response, error)
}

type corkTypeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCorkTypeServiceClient(cc *grpc.ClientConn) CorkTypeServiceClient {
	return &corkTypeServiceClient{cc}
}

func (c *corkTypeServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/CorkTypeService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corkTypeServiceClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/CorkTypeService/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corkTypeServiceClient) StageExecute(ctx context.Context, opts ...grpc.CallOption) (CorkTypeService_StageExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CorkTypeService_serviceDesc.Streams[0], c.cc, "/CorkTypeService/StageExecute", opts...)
	if err != nil {
		return nil, err
	}
	x := &corkTypeServiceStageExecuteClient{stream}
	return x, nil
}

type CorkTypeService_StageExecuteClient interface {
	Send(*ExecuteInputEvent) error
	Recv() (*ExecuteOutputEvent, error)
	grpc.ClientStream
}

type corkTypeServiceStageExecuteClient struct {
	grpc.ClientStream
}

func (x *corkTypeServiceStageExecuteClient) Send(m *ExecuteInputEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *corkTypeServiceStageExecuteClient) Recv() (*ExecuteOutputEvent, error) {
	m := new(ExecuteOutputEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *corkTypeServiceClient) EventReact(ctx context.Context, in *EventReactRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/CorkTypeService/EventReact", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CorkTypeService service

type CorkTypeServiceServer interface {
	// Status endpoint
	Status(context.Context, *StatusRequest) (*Response, error)
	// Kills the cork server
	Kill(context.Context, *KillRequest) (*Response, error)
	// Executes a specific stage
	StageExecute(CorkTypeService_StageExecuteServer) error
	// React to an event
	EventReact(context.Context, *EventReactRequest) (*Response, error)
}

func RegisterCorkTypeServiceServer(s *grpc.Server, srv CorkTypeServiceServer) {
	s.RegisterService(&_CorkTypeService_serviceDesc, srv)
}

func _CorkTypeService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorkTypeServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorkTypeService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorkTypeServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorkTypeService_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorkTypeServiceServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorkTypeService/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorkTypeServiceServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorkTypeService_StageExecute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CorkTypeServiceServer).StageExecute(&corkTypeServiceStageExecuteServer{stream})
}

type CorkTypeService_StageExecuteServer interface {
	Send(*ExecuteOutputEvent) error
	Recv() (*ExecuteInputEvent, error)
	grpc.ServerStream
}

type corkTypeServiceStageExecuteServer struct {
	grpc.ServerStream
}

func (x *corkTypeServiceStageExecuteServer) Send(m *ExecuteOutputEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *corkTypeServiceStageExecuteServer) Recv() (*ExecuteInputEvent, error) {
	m := new(ExecuteInputEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CorkTypeService_EventReact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventReactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorkTypeServiceServer).EventReact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorkTypeService/EventReact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorkTypeServiceServer).EventReact(ctx, req.(*EventReactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CorkTypeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CorkTypeService",
	HandlerType: (*CorkTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _CorkTypeService_Status_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _CorkTypeService_Kill_Handler,
		},
		{
			MethodName: "EventReact",
			Handler:    _CorkTypeService_EventReact_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StageExecute",
			Handler:       _CorkTypeService_StageExecute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cork.proto",
}

func init() { proto.RegisterFile("cork.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xaf, 0x93, 0xd8, 0x49, 0xc6, 0xe9, 0xb5, 0xdd, 0x14, 0xe4, 0x5a, 0xa2, 0x84, 0x45, 0x57,
	0xf5, 0x84, 0x6e, 0x55, 0x15, 0x01, 0xf7, 0x47, 0xf0, 0x70, 0x5c, 0xc4, 0x9d, 0xe0, 0x00, 0x39,
	0x77, 0xbc, 0xbb, 0xc9, 0x5c, 0x31, 0x4d, 0x6c, 0xe3, 0x5d, 0x47, 0x17, 0x3e, 0x02, 0xdf, 0x02,
	0xf1, 0x08, 0x1f, 0x80, 0x67, 0xde, 0xf8, 0x56, 0x68, 0xff, 0x39, 0x4e, 0xe2, 0x0a, 0xa1, 0x7b,
	0xf3, 0xcc, 0xfc, 0x66, 0x76, 0xf7, 0x37, 0xbf, 0xdd, 0x31, 0xc0, 0x34, 0x2b, 0x6e, 0x58, 0x5e,
	0x64, 0x22, 0xa3, 0x5d, 0x70, 0xc7, 0x8b, 0x5c, 0xac, 0xe8, 0x9f, 0x0e, 0xf4, 0x22, 0xe4, 0x79,
	0x96, 0x72, 0x24, 0xef, 0x82, 0xc7, 0x45, 0x2c, 0x4a, 0x1e, 0x38, 0x23, 0xe7, 0x7c, 0x3f, 0x32,
	0x16, 0x39, 0x05, 0x17, 0x25, 0x3a, 0x68, 0x8d, 0x9c, 0x73, 0xff, 0xd2, 0x63, 0x2a, 0xf7, 0xd9,
	0x5e, 0xa4, 0xdd, 0xe4, 0x1e, 0xb8, 0x5c, 0x60, 0xce, 0x83, 0xb6, 0x8a, 0x1f, 0xb1, 0x89, 0xc0,
	0xfc, 0x9b, 0x84, 0x0b, 0x5b, 0x59, 0x42, 0x15, 0x82, 0x7c, 0x0a, 0xdd, 0x65, 0x36, 0x2f, 0x17,
	0xc8, 0x83, 0x8e, 0x02, 0x87, 0xec, 0x07, 0x6d, 0xbf, 0xcc, 0x5e, 0x64, 0x65, 0x2a, 0xbe, 0xc2,
	0x7a, 0x96, 0x05, 0x3f, 0x71, 0xa1, 0x5d, 0x20, 0xa7, 0xfb, 0xe0, 0x7f, 0x9d, 0xcc, 0xe7, 0x11,
	0xfe, 0x5c, 0x22, 0x17, 0x74, 0x08, 0x47, 0xcf, 0xd3, 0x44, 0x24, 0xf1, 0x3c, 0xf9, 0x05, 0xad,
	0xf3, 0x00, 0xf6, 0x27, 0x6a, 0xdf, 0xd6, 0xf1, 0x47, 0x0b, 0x8e, 0xc6, 0x6f, 0x70, 0x5a, 0x0a,
	0x7c, 0x9e, 0xe6, 0xa5, 0x18, 0x2f, 0x31, 0x15, 0x84, 0x40, 0x47, 0xac, 0x72, 0x54, 0x47, 0xed,
	0x47, 0xea, 0xfb, 0x3f, 0x0f, 0xfa, 0x02, 0x86, 0x5c, 0xc4, 0xd7, 0x68, 0xaa, 0x99, 0x05, 0xcc,
	0xb1, 0x4f, 0xd8, 0x64, 0x37, 0xa6, 0xd6, 0x7a, 0xb6, 0x17, 0x35, 0xe5, 0x91, 0x33, 0xf0, 0x78,
	0x72, 0x9d, 0xc6, 0x73, 0xc3, 0xc5, 0x80, 0x4d, 0x94, 0x69, 0x93, 0x4c, 0x94, 0x7c, 0x08, 0x6e,
	0x22, 0x37, 0x1e, 0xb8, 0x0a, 0xe6, 0xb3, 0xf5, 0x31, 0xe4, 0xde, 0x54, 0x8c, 0x7c, 0x01, 0x77,
	0xf2, 0xb8, 0x88, 0x17, 0xdc, 0xd2, 0x17, 0x78, 0x0a, 0x7d, 0xcc, 0xbe, 0xdf, 0x70, 0xdb, 0xb4,
	0x2d, 0xf4, 0x13, 0x0f, 0x3a, 0x57, 0xd9, 0x6c, 0x45, 0x7f, 0x75, 0x60, 0xd8, 0x90, 0x41, 0x1e,
	0x80, 0xa7, 0x33, 0x02, 0x67, 0xd4, 0x3e, 0xf7, 0x2f, 0x47, 0x4d, 0x75, 0x8d, 0x6f, 0x9c, 0x8a,
	0x62, 0x15, 0x19, 0x7c, 0xf8, 0x10, 0xfc, 0x9a, 0x9b, 0x1c, 0x42, 0xfb, 0x06, 0x57, 0x86, 0x77,
	0xf9, 0x49, 0x8e, 0xc1, 0x5d, 0xc6, 0xf3, 0x12, 0x15, 0xed, 0xfd, 0x48, 0x1b, 0x8f, 0x5a, 0x0f,
	0x1c, 0x7a, 0x01, 0xc1, 0x6d, 0xa4, 0xca, 0x2c, 0x45, 0xaa, 0xa9, 0xa4, 0x0d, 0x7a, 0x17, 0xfc,
	0x1a, 0x89, 0x4a, 0xd2, 0x9a, 0x62, 0x89, 0x72, 0x2d, 0xa5, 0x94, 0x02, 0xd4, 0xb4, 0x70, 0x0c,
	0xee, 0xd5, 0x4a, 0xa0, 0xd6, 0xfd, 0x20, 0xd2, 0x06, 0xfd, 0xad, 0x05, 0xc4, 0x2c, 0xfc, 0x5d,
	0x29, 0xde, 0x4a, 0x38, 0xef, 0x41, 0x1b, 0xd3, 0x99, 0x11, 0x4a, 0x9f, 0x8d, 0xd3, 0x99, 0x6d,
	0x83, 0xf4, 0x4b, 0x21, 0x64, 0x6a, 0x85, 0x4a, 0x08, 0xb5, 0x05, 0xa5, 0x10, 0x74, 0x54, 0xe2,
	0xf0, 0x4d, 0x9e, 0x15, 0x56, 0x09, 0x03, 0x36, 0x56, 0x66, 0x85, 0xd3, 0x51, 0x29, 0x18, 0x2c,
	0x8a, 0xac, 0x30, 0x12, 0xf0, 0xd9, 0x58, 0x5a, 0x95, 0x60, 0x54, 0x8c, 0x3c, 0x86, 0x7d, 0x2b,
	0x01, 0x2d, 0xe3, 0xae, 0x02, 0x0f, 0xab, 0xbe, 0x6e, 0x08, 0x78, 0x13, 0x5b, 0xa9, 0xe5, 0x77,
	0x07, 0x0e, 0x14, 0xfe, 0x29, 0xbe, 0x4e, 0xe4, 0x55, 0xcc, 0xd2, 0x46, 0x82, 0x02, 0xe8, 0xce,
	0xf0, 0x75, 0x5c, 0xce, 0x85, 0x69, 0xb2, 0x35, 0xc9, 0x29, 0xc0, 0x8f, 0x31, 0x7f, 0x6a, 0x82,
	0x92, 0xa1, 0x5e, 0x54, 0xf3, 0x90, 0x11, 0xf8, 0x33, 0xe4, 0xd3, 0x22, 0xc9, 0x65, 0x71, 0x45,
	0x50, 0x3f, 0xaa, 0xbb, 0x24, 0x22, 0xe1, 0x13, 0x4c, 0x79, 0x22, 0x92, 0x25, 0x2a, 0x6a, 0x7a,
	0x51, 0xdd, 0x45, 0xff, 0x76, 0x80, 0xec, 0x9e, 0x8a, 0xbc, 0x82, 0xc3, 0x7c, 0x73, 0xef, 0x56,
	0xdc, 0xf7, 0x1a, 0x48, 0x60, 0x5b, 0xe7, 0x34, 0x2a, 0xdf, 0x29, 0x11, 0xbe, 0x82, 0x77, 0x1a,
	0xa1, 0x0d, 0xca, 0x3f, 0xab, 0x2b, 0xdf, 0xbf, 0x3c, 0xdc, 0x5e, 0xa3, 0x7e, 0x17, 0x4e, 0xa1,
	0x67, 0x75, 0xa3, 0x28, 0x8e, 0xaf, 0xf5, 0x6e, 0x25, 0xc5, 0xf1, 0x35, 0xa7, 0x67, 0x00, 0xeb,
	0x36, 0x4b, 0xc2, 0x17, 0xc8, 0xf9, 0xfa, 0x7e, 0x58, 0x93, 0x7e, 0x06, 0x7e, 0x4d, 0x35, 0xb2,
	0x54, 0x1a, 0x2f, 0xaa, 0x6e, 0xc9, 0xef, 0xe6, 0x0b, 0x49, 0x1f, 0x83, 0x5f, 0xbf, 0x07, 0x8d,
	0x97, 0x46, 0xcf, 0x90, 0x02, 0xe3, 0x85, 0xc9, 0x35, 0x16, 0xbd, 0x00, 0x22, 0xa7, 0xc2, 0xd6,
	0x0b, 0x18, 0x42, 0x4f, 0xce, 0x85, 0x6f, 0xd7, 0x1b, 0xa8, 0x6c, 0x1a, 0x42, 0x47, 0x66, 0x34,
	0x6d, 0x90, 0xde, 0x87, 0xc3, 0xed, 0x19, 0x43, 0x4e, 0xa0, 0x23, 0x73, 0x4d, 0x07, 0x5d, 0x35,
	0x84, 0x22, 0xe5, 0xa2, 0x9f, 0xc0, 0xc9, 0xad, 0x53, 0x46, 0x32, 0x65, 0x47, 0x92, 0xa6, 0xd3,
	0x9a, 0xf4, 0x23, 0x18, 0x36, 0xbc, 0x3e, 0xb7, 0x3c, 0x3c, 0x7f, 0x39, 0x70, 0xa4, 0x88, 0x89,
	0x30, 0x9e, 0x0a, 0x8b, 0x0d, 0xa0, 0x9b, 0x17, 0xd9, 0x4f, 0x38, 0x15, 0xb6, 0x0d, 0xc6, 0xac,
	0x5a, 0xd8, 0x5a, 0xb7, 0x90, 0x3c, 0x84, 0xae, 0xbe, 0xe9, 0x72, 0x94, 0xca, 0x53, 0xbc, 0xcf,
	0x76, 0x4a, 0x9a, 0xa7, 0xc1, 0xa8, 0xcf, 0xe2, 0xc3, 0x47, 0x30, 0xa8, 0x07, 0xfe, 0xcf, 0x2b,
	0x7b, 0xf9, 0x8f, 0x03, 0x07, 0x5f, 0x66, 0xc5, 0xcd, 0xcb, 0x55, 0x8e, 0x13, 0x2c, 0x96, 0xc9,
	0x14, 0xc9, 0x5d, 0xf0, 0xf4, 0x14, 0x25, 0x77, 0xd8, 0xc6, 0x38, 0x0d, 0xfb, 0xcc, 0x52, 0x47,
	0xf7, 0xc8, 0x07, 0xd0, 0x91, 0x03, 0x99, 0x0c, 0x58, 0x6d, 0x2e, 0x6f, 0x42, 0x3e, 0x87, 0x41,
	0x9d, 0x45, 0x42, 0xd8, 0xce, 0x30, 0x0e, 0x87, 0x6c, 0xf7, 0xa1, 0xa5, 0x7b, 0xe7, 0xce, 0x85,
	0x43, 0xee, 0x03, 0xac, 0x39, 0x90, 0xc9, 0xdb, 0x84, 0x6c, 0xac, 0x76, 0xe5, 0xa9, 0x1f, 0x9c,
	0x8f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x14, 0x58, 0x47, 0x82, 0xee, 0x08, 0x00, 0x00,
}
