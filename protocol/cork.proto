syntax = "proto3";

message Empty {
}

message Response {
    uint32 status = 1;
    oneof res {
        Empty empty = 2;
        StepListResponse steps = 3;
        VolumesToMountGetResponse volumes = 4;
    }
}

service CorkTypeService {
    // Status endpoint
    rpc Status(StatusRequest) returns (Response) {};
    
    // Kills the cork server
    rpc Kill(KillRequest) returns (Response) {};

    // Executes a specific stage
    rpc StageExecute(stream ExecuteInputEvent) returns (stream ExecuteOutputEvent) {};

    // React to an event
    rpc EventReact(EventReactRequest) returns (Response) {};

    // Initialize a project
    //rpc Initialize(InitializeRequest) returns (stream ExecuteEvent) {};
}

message KillRequest {
}

message InitializeRequest {
}

message StatusRequest {
}

message ExecuteInputEvent {
    string type = 1;
    oneof body {
        Empty empty = 2;
        StageExecuteRequestEvent stageExecuteRequest = 3;
        SignalEvent signal = 4;
        InputEvent input = 5;
        ParamsResponseEvent paramsResponse = 6;
    }
}

message ParamsResponseEvent {
    map<string, string> params = 1;
}

message StageExecuteRequestEvent {
    string stage = 1;
}

message SignalEvent {
    int32 signal = 1;
}

message InputEvent {
    bytes bytes = 1;
}

message ExecuteOutputEvent {
    string type = 1;
    oneof body {
        Empty empty = 2;
        EndEvent end = 3;
        OutputEvent output = 4;
        ExportEvent export = 5;
        ErrorEvent error = 6;
        ParamsRequestEvent paramsRequest = 7;
    }
}

message ParamDefinition {
    string type = 1;
    string default = 2;
    bool hasDefault = 3;
    string description = 4;
    bool isSensitive = 5;
}

message ParamsRequestEvent {
    map<string, ParamDefinition> paramDefinitions = 1;
}

message EndEvent {
    repeated string tags = 1;
}

message ErrorEvent {
    string message = 1;
}

message ExportEvent {
    string name = 1;
    string value = 2;
}

message OutputEvent {
    bytes bytes = 1;
    string stream = 2;
}

message StepExecuteRequest {
    string stepName = 1;
}

message Step {
    string name = 1;
}

message StepListResponse {
    repeated Step step = 1;
}

message VolumesToMountGetResponse {
    repeated string volumes = 1;
}

message StageExecuteRequest {
    string stage = 1;
}

message EventReactRequest {
    string project = 1;
    repeated string tags = 2;
    map<string,string> outputs = 3;
}