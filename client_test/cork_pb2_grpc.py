# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import cork_pb2 as cork__pb2


class CorkTypeServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Kill = channel.unary_unary(
        '/CorkTypeService/Kill',
        request_serializer=cork__pb2.KillRequest.SerializeToString,
        response_deserializer=cork__pb2.Response.FromString,
        )
    self.VolumesToMountGet = channel.unary_unary(
        '/CorkTypeService/VolumesToMountGet',
        request_serializer=cork__pb2.VolumesToMountGetRequest.SerializeToString,
        response_deserializer=cork__pb2.Response.FromString,
        )
    self.StageExecute = channel.unary_stream(
        '/CorkTypeService/StageExecute',
        request_serializer=cork__pb2.StageExecuteRequest.SerializeToString,
        response_deserializer=cork__pb2.ExecuteEvent.FromString,
        )
    self.EventReact = channel.unary_unary(
        '/CorkTypeService/EventReact',
        request_serializer=cork__pb2.EventReactRequest.SerializeToString,
        response_deserializer=cork__pb2.Response.FromString,
        )


class CorkTypeServiceServicer(object):

  def Kill(self, request, context):
    """Kills the cork server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumesToMountGet(self, request, context):
    """Gets the configuration of volumes to mount for this cork server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StageExecute(self, request, context):
    """Executes a specific stage
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EventReact(self, request, context):
    """React to an event
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CorkTypeServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Kill': grpc.unary_unary_rpc_method_handler(
          servicer.Kill,
          request_deserializer=cork__pb2.KillRequest.FromString,
          response_serializer=cork__pb2.Response.SerializeToString,
      ),
      'VolumesToMountGet': grpc.unary_unary_rpc_method_handler(
          servicer.VolumesToMountGet,
          request_deserializer=cork__pb2.VolumesToMountGetRequest.FromString,
          response_serializer=cork__pb2.Response.SerializeToString,
      ),
      'StageExecute': grpc.unary_stream_rpc_method_handler(
          servicer.StageExecute,
          request_deserializer=cork__pb2.StageExecuteRequest.FromString,
          response_serializer=cork__pb2.ExecuteEvent.SerializeToString,
      ),
      'EventReact': grpc.unary_unary_rpc_method_handler(
          servicer.EventReact,
          request_deserializer=cork__pb2.EventReactRequest.FromString,
          response_serializer=cork__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'CorkTypeService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
