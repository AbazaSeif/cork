# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cork.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='cork.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\ncork.proto\"\x07\n\x05\x45mpty\"\x8d\x01\n\x08Response\x12\x0e\n\x06status\x18\x01 \x01(\r\x12\x17\n\x05\x65mpty\x18\x02 \x01(\x0b\x32\x06.EmptyH\x00\x12\"\n\x05steps\x18\x03 \x01(\x0b\x32\x11.StepListResponseH\x00\x12-\n\x07volumes\x18\x04 \x01(\x0b\x32\x1a.VolumesToMountGetResponseH\x00\x42\x05\n\x03res\"\r\n\x0bKillRequest\"\x97\x01\n\x0c\x45xecuteEvent\x12\x0c\n\x04type\x18\x01 \x01(\t\x12\x17\n\x05\x65mpty\x18\x02 \x01(\x0b\x32\x06.EmptyH\x00\x12\x18\n\x03\x65nd\x18\x03 \x01(\x0b\x32\t.EndEventH\x00\x12\x1e\n\x06output\x18\x04 \x01(\x0b\x32\x0c.OutputEventH\x00\x12\x1e\n\x06\x65xport\x18\x05 \x01(\x0b\x32\x0c.ExportEventH\x00\x42\x06\n\x04\x62ody\"\x18\n\x08\x45ndEvent\x12\x0c\n\x04tags\x18\x01 \x03(\t\"*\n\x0b\x45xportEvent\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t\",\n\x0bOutputEvent\x12\r\n\x05\x62ytes\x18\x01 \x01(\x0c\x12\x0e\n\x06stream\x18\x02 \x01(\t\"&\n\x12StepExecuteRequest\x12\x10\n\x08stepName\x18\x01 \x01(\t\"\x14\n\x04Step\x12\x0c\n\x04name\x18\x01 \x01(\t\"\'\n\x10StepListResponse\x12\x13\n\x04step\x18\x01 \x03(\x0b\x32\x05.Step\"\x1a\n\x18VolumesToMountGetRequest\",\n\x19VolumesToMountGetResponse\x12\x0f\n\x07volumes\x18\x01 \x03(\t\"$\n\x13StageExecuteRequest\x12\r\n\x05stage\x18\x01 \x01(\t\"2\n\x11\x45ventReactRequest\x12\x0f\n\x07project\x18\x01 \x01(\t\x12\x0c\n\x04tags\x18\x02 \x03(\t2\xd9\x01\n\x0f\x43orkTypeService\x12!\n\x04Kill\x12\x0c.KillRequest\x1a\t.Response\"\x00\x12;\n\x11VolumesToMountGet\x12\x19.VolumesToMountGetRequest\x1a\t.Response\"\x00\x12\x37\n\x0cStageExecute\x12\x14.StageExecuteRequest\x1a\r.ExecuteEvent\"\x00\x30\x01\x12-\n\nEventReact\x12\x12.EventReactRequest\x1a\t.Response\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=14,
  serialized_end=21,
)


_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='Response.status', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='empty', full_name='Response.empty', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='steps', full_name='Response.steps', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='volumes', full_name='Response.volumes', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='res', full_name='Response.res',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=24,
  serialized_end=165,
)


_KILLREQUEST = _descriptor.Descriptor(
  name='KillRequest',
  full_name='KillRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=167,
  serialized_end=180,
)


_EXECUTEEVENT = _descriptor.Descriptor(
  name='ExecuteEvent',
  full_name='ExecuteEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='ExecuteEvent.type', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='empty', full_name='ExecuteEvent.empty', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='end', full_name='ExecuteEvent.end', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='output', full_name='ExecuteEvent.output', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='export', full_name='ExecuteEvent.export', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='body', full_name='ExecuteEvent.body',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=183,
  serialized_end=334,
)


_ENDEVENT = _descriptor.Descriptor(
  name='EndEvent',
  full_name='EndEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tags', full_name='EndEvent.tags', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=336,
  serialized_end=360,
)


_EXPORTEVENT = _descriptor.Descriptor(
  name='ExportEvent',
  full_name='ExportEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='ExportEvent.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='ExportEvent.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=362,
  serialized_end=404,
)


_OUTPUTEVENT = _descriptor.Descriptor(
  name='OutputEvent',
  full_name='OutputEvent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='bytes', full_name='OutputEvent.bytes', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stream', full_name='OutputEvent.stream', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=406,
  serialized_end=450,
)


_STEPEXECUTEREQUEST = _descriptor.Descriptor(
  name='StepExecuteRequest',
  full_name='StepExecuteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stepName', full_name='StepExecuteRequest.stepName', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=452,
  serialized_end=490,
)


_STEP = _descriptor.Descriptor(
  name='Step',
  full_name='Step',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='Step.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=492,
  serialized_end=512,
)


_STEPLISTRESPONSE = _descriptor.Descriptor(
  name='StepListResponse',
  full_name='StepListResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='step', full_name='StepListResponse.step', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=514,
  serialized_end=553,
)


_VOLUMESTOMOUNTGETREQUEST = _descriptor.Descriptor(
  name='VolumesToMountGetRequest',
  full_name='VolumesToMountGetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=555,
  serialized_end=581,
)


_VOLUMESTOMOUNTGETRESPONSE = _descriptor.Descriptor(
  name='VolumesToMountGetResponse',
  full_name='VolumesToMountGetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='volumes', full_name='VolumesToMountGetResponse.volumes', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=583,
  serialized_end=627,
)


_STAGEEXECUTEREQUEST = _descriptor.Descriptor(
  name='StageExecuteRequest',
  full_name='StageExecuteRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='stage', full_name='StageExecuteRequest.stage', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=629,
  serialized_end=665,
)


_EVENTREACTREQUEST = _descriptor.Descriptor(
  name='EventReactRequest',
  full_name='EventReactRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='project', full_name='EventReactRequest.project', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='EventReactRequest.tags', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=667,
  serialized_end=717,
)

_RESPONSE.fields_by_name['empty'].message_type = _EMPTY
_RESPONSE.fields_by_name['steps'].message_type = _STEPLISTRESPONSE
_RESPONSE.fields_by_name['volumes'].message_type = _VOLUMESTOMOUNTGETRESPONSE
_RESPONSE.oneofs_by_name['res'].fields.append(
  _RESPONSE.fields_by_name['empty'])
_RESPONSE.fields_by_name['empty'].containing_oneof = _RESPONSE.oneofs_by_name['res']
_RESPONSE.oneofs_by_name['res'].fields.append(
  _RESPONSE.fields_by_name['steps'])
_RESPONSE.fields_by_name['steps'].containing_oneof = _RESPONSE.oneofs_by_name['res']
_RESPONSE.oneofs_by_name['res'].fields.append(
  _RESPONSE.fields_by_name['volumes'])
_RESPONSE.fields_by_name['volumes'].containing_oneof = _RESPONSE.oneofs_by_name['res']
_EXECUTEEVENT.fields_by_name['empty'].message_type = _EMPTY
_EXECUTEEVENT.fields_by_name['end'].message_type = _ENDEVENT
_EXECUTEEVENT.fields_by_name['output'].message_type = _OUTPUTEVENT
_EXECUTEEVENT.fields_by_name['export'].message_type = _EXPORTEVENT
_EXECUTEEVENT.oneofs_by_name['body'].fields.append(
  _EXECUTEEVENT.fields_by_name['empty'])
_EXECUTEEVENT.fields_by_name['empty'].containing_oneof = _EXECUTEEVENT.oneofs_by_name['body']
_EXECUTEEVENT.oneofs_by_name['body'].fields.append(
  _EXECUTEEVENT.fields_by_name['end'])
_EXECUTEEVENT.fields_by_name['end'].containing_oneof = _EXECUTEEVENT.oneofs_by_name['body']
_EXECUTEEVENT.oneofs_by_name['body'].fields.append(
  _EXECUTEEVENT.fields_by_name['output'])
_EXECUTEEVENT.fields_by_name['output'].containing_oneof = _EXECUTEEVENT.oneofs_by_name['body']
_EXECUTEEVENT.oneofs_by_name['body'].fields.append(
  _EXECUTEEVENT.fields_by_name['export'])
_EXECUTEEVENT.fields_by_name['export'].containing_oneof = _EXECUTEEVENT.oneofs_by_name['body']
_STEPLISTRESPONSE.fields_by_name['step'].message_type = _STEP
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY
DESCRIPTOR.message_types_by_name['Response'] = _RESPONSE
DESCRIPTOR.message_types_by_name['KillRequest'] = _KILLREQUEST
DESCRIPTOR.message_types_by_name['ExecuteEvent'] = _EXECUTEEVENT
DESCRIPTOR.message_types_by_name['EndEvent'] = _ENDEVENT
DESCRIPTOR.message_types_by_name['ExportEvent'] = _EXPORTEVENT
DESCRIPTOR.message_types_by_name['OutputEvent'] = _OUTPUTEVENT
DESCRIPTOR.message_types_by_name['StepExecuteRequest'] = _STEPEXECUTEREQUEST
DESCRIPTOR.message_types_by_name['Step'] = _STEP
DESCRIPTOR.message_types_by_name['StepListResponse'] = _STEPLISTRESPONSE
DESCRIPTOR.message_types_by_name['VolumesToMountGetRequest'] = _VOLUMESTOMOUNTGETREQUEST
DESCRIPTOR.message_types_by_name['VolumesToMountGetResponse'] = _VOLUMESTOMOUNTGETRESPONSE
DESCRIPTOR.message_types_by_name['StageExecuteRequest'] = _STAGEEXECUTEREQUEST
DESCRIPTOR.message_types_by_name['EventReactRequest'] = _EVENTREACTREQUEST

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:Empty)
  ))
_sym_db.RegisterMessage(Empty)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(
  DESCRIPTOR = _RESPONSE,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:Response)
  ))
_sym_db.RegisterMessage(Response)

KillRequest = _reflection.GeneratedProtocolMessageType('KillRequest', (_message.Message,), dict(
  DESCRIPTOR = _KILLREQUEST,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:KillRequest)
  ))
_sym_db.RegisterMessage(KillRequest)

ExecuteEvent = _reflection.GeneratedProtocolMessageType('ExecuteEvent', (_message.Message,), dict(
  DESCRIPTOR = _EXECUTEEVENT,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:ExecuteEvent)
  ))
_sym_db.RegisterMessage(ExecuteEvent)

EndEvent = _reflection.GeneratedProtocolMessageType('EndEvent', (_message.Message,), dict(
  DESCRIPTOR = _ENDEVENT,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:EndEvent)
  ))
_sym_db.RegisterMessage(EndEvent)

ExportEvent = _reflection.GeneratedProtocolMessageType('ExportEvent', (_message.Message,), dict(
  DESCRIPTOR = _EXPORTEVENT,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:ExportEvent)
  ))
_sym_db.RegisterMessage(ExportEvent)

OutputEvent = _reflection.GeneratedProtocolMessageType('OutputEvent', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUTEVENT,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:OutputEvent)
  ))
_sym_db.RegisterMessage(OutputEvent)

StepExecuteRequest = _reflection.GeneratedProtocolMessageType('StepExecuteRequest', (_message.Message,), dict(
  DESCRIPTOR = _STEPEXECUTEREQUEST,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:StepExecuteRequest)
  ))
_sym_db.RegisterMessage(StepExecuteRequest)

Step = _reflection.GeneratedProtocolMessageType('Step', (_message.Message,), dict(
  DESCRIPTOR = _STEP,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:Step)
  ))
_sym_db.RegisterMessage(Step)

StepListResponse = _reflection.GeneratedProtocolMessageType('StepListResponse', (_message.Message,), dict(
  DESCRIPTOR = _STEPLISTRESPONSE,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:StepListResponse)
  ))
_sym_db.RegisterMessage(StepListResponse)

VolumesToMountGetRequest = _reflection.GeneratedProtocolMessageType('VolumesToMountGetRequest', (_message.Message,), dict(
  DESCRIPTOR = _VOLUMESTOMOUNTGETREQUEST,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:VolumesToMountGetRequest)
  ))
_sym_db.RegisterMessage(VolumesToMountGetRequest)

VolumesToMountGetResponse = _reflection.GeneratedProtocolMessageType('VolumesToMountGetResponse', (_message.Message,), dict(
  DESCRIPTOR = _VOLUMESTOMOUNTGETRESPONSE,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:VolumesToMountGetResponse)
  ))
_sym_db.RegisterMessage(VolumesToMountGetResponse)

StageExecuteRequest = _reflection.GeneratedProtocolMessageType('StageExecuteRequest', (_message.Message,), dict(
  DESCRIPTOR = _STAGEEXECUTEREQUEST,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:StageExecuteRequest)
  ))
_sym_db.RegisterMessage(StageExecuteRequest)

EventReactRequest = _reflection.GeneratedProtocolMessageType('EventReactRequest', (_message.Message,), dict(
  DESCRIPTOR = _EVENTREACTREQUEST,
  __module__ = 'cork_pb2'
  # @@protoc_insertion_point(class_scope:EventReactRequest)
  ))
_sym_db.RegisterMessage(EventReactRequest)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class CorkTypeServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Kill = channel.unary_unary(
          '/CorkTypeService/Kill',
          request_serializer=KillRequest.SerializeToString,
          response_deserializer=Response.FromString,
          )
      self.VolumesToMountGet = channel.unary_unary(
          '/CorkTypeService/VolumesToMountGet',
          request_serializer=VolumesToMountGetRequest.SerializeToString,
          response_deserializer=Response.FromString,
          )
      self.StageExecute = channel.unary_stream(
          '/CorkTypeService/StageExecute',
          request_serializer=StageExecuteRequest.SerializeToString,
          response_deserializer=ExecuteEvent.FromString,
          )
      self.EventReact = channel.unary_unary(
          '/CorkTypeService/EventReact',
          request_serializer=EventReactRequest.SerializeToString,
          response_deserializer=Response.FromString,
          )


  class CorkTypeServiceServicer(object):

    def Kill(self, request, context):
      """Kills the cork server
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def VolumesToMountGet(self, request, context):
      """Gets the configuration of volumes to mount for this cork server
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def StageExecute(self, request, context):
      """Executes a specific stage
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def EventReact(self, request, context):
      """React to an event
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_CorkTypeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Kill': grpc.unary_unary_rpc_method_handler(
            servicer.Kill,
            request_deserializer=KillRequest.FromString,
            response_serializer=Response.SerializeToString,
        ),
        'VolumesToMountGet': grpc.unary_unary_rpc_method_handler(
            servicer.VolumesToMountGet,
            request_deserializer=VolumesToMountGetRequest.FromString,
            response_serializer=Response.SerializeToString,
        ),
        'StageExecute': grpc.unary_stream_rpc_method_handler(
            servicer.StageExecute,
            request_deserializer=StageExecuteRequest.FromString,
            response_serializer=ExecuteEvent.SerializeToString,
        ),
        'EventReact': grpc.unary_unary_rpc_method_handler(
            servicer.EventReact,
            request_deserializer=EventReactRequest.FromString,
            response_serializer=Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'CorkTypeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaCorkTypeServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Kill(self, request, context):
      """Kills the cork server
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def VolumesToMountGet(self, request, context):
      """Gets the configuration of volumes to mount for this cork server
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def StageExecute(self, request, context):
      """Executes a specific stage
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def EventReact(self, request, context):
      """React to an event
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaCorkTypeServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def Kill(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Kills the cork server
      """
      raise NotImplementedError()
    Kill.future = None
    def VolumesToMountGet(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Gets the configuration of volumes to mount for this cork server
      """
      raise NotImplementedError()
    VolumesToMountGet.future = None
    def StageExecute(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Executes a specific stage
      """
      raise NotImplementedError()
    def EventReact(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """React to an event
      """
      raise NotImplementedError()
    EventReact.future = None


  def beta_create_CorkTypeService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('CorkTypeService', 'EventReact'): EventReactRequest.FromString,
      ('CorkTypeService', 'Kill'): KillRequest.FromString,
      ('CorkTypeService', 'StageExecute'): StageExecuteRequest.FromString,
      ('CorkTypeService', 'VolumesToMountGet'): VolumesToMountGetRequest.FromString,
    }
    response_serializers = {
      ('CorkTypeService', 'EventReact'): Response.SerializeToString,
      ('CorkTypeService', 'Kill'): Response.SerializeToString,
      ('CorkTypeService', 'StageExecute'): ExecuteEvent.SerializeToString,
      ('CorkTypeService', 'VolumesToMountGet'): Response.SerializeToString,
    }
    method_implementations = {
      ('CorkTypeService', 'EventReact'): face_utilities.unary_unary_inline(servicer.EventReact),
      ('CorkTypeService', 'Kill'): face_utilities.unary_unary_inline(servicer.Kill),
      ('CorkTypeService', 'StageExecute'): face_utilities.unary_stream_inline(servicer.StageExecute),
      ('CorkTypeService', 'VolumesToMountGet'): face_utilities.unary_unary_inline(servicer.VolumesToMountGet),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_CorkTypeService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('CorkTypeService', 'EventReact'): EventReactRequest.SerializeToString,
      ('CorkTypeService', 'Kill'): KillRequest.SerializeToString,
      ('CorkTypeService', 'StageExecute'): StageExecuteRequest.SerializeToString,
      ('CorkTypeService', 'VolumesToMountGet'): VolumesToMountGetRequest.SerializeToString,
    }
    response_deserializers = {
      ('CorkTypeService', 'EventReact'): Response.FromString,
      ('CorkTypeService', 'Kill'): Response.FromString,
      ('CorkTypeService', 'StageExecute'): ExecuteEvent.FromString,
      ('CorkTypeService', 'VolumesToMountGet'): Response.FromString,
    }
    cardinalities = {
      'EventReact': cardinality.Cardinality.UNARY_UNARY,
      'Kill': cardinality.Cardinality.UNARY_UNARY,
      'StageExecute': cardinality.Cardinality.UNARY_STREAM,
      'VolumesToMountGet': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'CorkTypeService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
